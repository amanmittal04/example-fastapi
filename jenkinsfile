pipeline {

    agent {
        label 'default'
    }


    environment {
        SCANNER_HOME=tool 'sonarscanner'
        DOCKER_HUB_USERNAME=credentials('c0b104b8-dd2d-41d1-af4b-18aac98fcd63')
        DOCKER_HUB_ACCESS_TOKEN=credentials('d5ee82e6-c014-4565-ada1-8fb39249079e')
        USER_CRED=credentials('a485edbb-cb73-4beb-b147-ca3722066bd0')
        SSH_CREDENTIALS = credentials('docker-host-root-keys')
        SONARSCANNER = 'sonarscanner'
        SONARSERVER = 'sonarserver'
        SONAR_LOGIN = credentials('abb52b28-0816-4a28-8683-a40b9d7a093d')
        SONAR_PASSWORD = credentials('63c49ffe-0c9e-469d-b7e3-a81f0ce8ef45')
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/amanmittal04/example-fastapi.git']])
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'pip install --upgrade pip'
                sh 'pip install -r requirements.txt'
            }
        }

        stage('OWASP Scan') {
            steps {
                dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'DP-Check'
            }
        }

        stage('Sonar Analysis') {
            environment{
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}") {
                    sh '''
                        ${scannerHome}/bin/sonar-scanner -Dsonar.url=http://localhost:9000/ -Dsonar.login=$SONAR_LOGIN_PSW -Dsonar.password=$SONAR_PASSWORD_PSW -Dsonar.projectName=social_app -Dsonar.projectKey=social_app
                    '''
                }  
            }
        }
        
        stage('Testing') {
            steps {
                sh 'echo $USER_CRED_PSW | sudo -E -S docker-compose up -d'
                sh 'python3 -m pytest'
                sh 'echo $USER_CRED_PSW | sudo -E -S docker-compose down' 
            }
        }
        stage('Build') {
            steps {
                sh 'echo $USER_CRED_PSW | sudo -E -S docker build -t amanmittal04/fastapi:0.1 .'
            }
        }
        stage('Login') {
            environment {
                DOCKER_CLIENT_TIMEOUT = '600' 
            }
            steps {
                sh 'echo $USER_CRED_PSW | sudo -E -S docker login -u $DOCKER_HUB_USERNAME_PSW -p $DOCKER_HUB_ACCESS_TOKEN_PSW'
            }
        }
        stage('Trivy Scan and Push') {
            environment {
                DOCKER_CLIENT_TIMEOUT = '600' 
            }
            steps {
                sh 'echo $USER_CRED_PSW | sudo -E -S trivy image amanmittal04/fastapi:0.1 > trivyReport.txt'
                sh 'echo $USER_CRED_PSW | sudo -E -S docker push amanmittal04/fastapi:0.1'
            }
        }

        stage('Deploy') {
            agent {
                label 'aws'
            }
            steps {
                sh """
                    echo $USER_CRED_PSW | sudo -E -S docker login -u $DOCKER_HUB_USERNAME_PSW -p $DOCKER_HUB_ACCESS_TOKEN_PSW
                    sudo docker pull amanmittal04/fastapi:0.1
                    sudo docker-compose up -d
                    pwd
                """
            }
        }
    }
    post {
        always {
            emailext (
                to: "amanmittal0210@gmail.com",
                subject: "Jenkins Report",
                body: "Go through Scanning Reports",
                attachmentsPattern: '*.html,trivyReport.txt'
            )
        }
    }

} 


// squ_10f9c5ef91471f66d3ba2545387fd5ae445a2406